---
title: "Tidycomm-tests"
author: "Test Bär"

format: 
  pdf:
    documentclass: scrartcl
    papersize: a4
    toc: true
    number-sections: true
    colorlinks: true
  html: default 

lang: de-CH
editor: source
---

```{r}
#| label: setup
#| echo: false
#| warings: false

knitr::opts_chunk$set(
  collapse = TRUE,
  echo = FALSE,
  fig.width = 7,
  fig.align = "center",
  fig.pos = "H",
  out.width = "85%",
  fig.show = 'hold',
  fig.subcap = TRUE,
  eval = TRUE, 
  warning = FALSE
)

pacman::p_load(tidyverse, viridisLite, viridis, tidycomm)
```

```{r}
#| label: Analyseobjekt
#| include: false

DATEN <- tidycomm::WoJ

model <- lm(autonomy_selection ~ work_experience + trust_government, data = DATEN)

summary(model)

reg_tab <- tidycomm::regress(model, 
                    check_multicollinearity = TRUE, 
                    check_independenterrors = TRUE, 
                    check_homoscedasticity = TRUE) 

  model <- model(reg_tab)
  model_summary <- summary(model)

# str(reg_tab)

```

# Regressionsanalyse mit den Daten "World of Journalism"

Es ist immer ratsam sich zunächst die Regressionskoeffizienten genau anzuschauen, was mit einer Tabelle praktisch am besten geht, wie sie in @tbl-tab1 einsehbar ist.

```{r}
#| label: tbl-tab1
#| tbl-cap: Regression auf autonome Auswahl
reg_tab |> 
  knit_regress_table()
```

## Teiltabelle


## Analyse der Voraussetzungen

In @fig-reslev ist gut zu erkennen.

```{r}
#| label: fig-reslev
#| fig.cap: residualsleverage plot

reg_tab |> 
  tidycomm::visualize(which = "reslev")
```

Schaut man sich darüber hinaus @fig-scaleloc im schönen UZH-Design an, wird einem alles klar.

```{r}
#| label: fig-scaleloc
#| fig.cap: scalelocation plot

reg_tab |> 
  tidycomm::visualize(which = "scaloc", .design = design_uzh())
```

Nicht zuletzt sollte man sich die Residuen in Abhängigkeit der geschätzten Werte ansehen, was im schönen Viridis-Design in @fig-resfit durchaus möglich ist, auch wenn das dunkle Lila nicht gut zu erkennen ist.

```{r}
#| label: fig-resfit
#| fig.cap: residualsleverage plot


reg_tab |> 
  tidycomm::visualize(which = "resfit", .design = design_viridis())
```
